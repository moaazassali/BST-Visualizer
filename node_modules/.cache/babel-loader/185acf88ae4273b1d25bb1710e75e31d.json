{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Muaath\\\\Desktop\\\\AVL\\\\src\\\\AVLTreeVisualizer\\\\AVLTreeVisualizer.jsx\";\nimport React, { Component, createRef } from \"react\";\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport \"./componentStyles.css\";\nimport AVLTree from \"./AVLTreeClass.js\";\nimport NodeCircle from \"./NodeCircle.jsx\";\nimport nodesPositions from \"./NodesPositions.js\";\nimport Arrow from \"./Arrow.jsx\";\nimport arrowPositions from \"./ArrowsPositions\";\nexport default class AVLTreeVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      number: \"\",\n      tree: new AVLTree(),\n      nodesArray: [],\n      arrowsArray: [],\n      animatedNodesKeys: [],\n      animatedKeyCounter: 0,\n      isInputDisabled: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.spawnNode = this.spawnNode.bind(this);\n    this.pathAnimation = this.pathAnimation.bind(this);\n    this.animateNext = this.animateNext.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: Number(value)\n    });\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    if (isNaN(this.state.number)) alert(\"Please insert a number instead\");else if (this.state.tree.size === 31) alert(\"Maximum tree size of 31 nodes has been reached!\");else if (this.state.number > 9999) alert(\"Please enter a value less than 10,000\");else {\n      const value = this.state.number;\n      if (this.state.tree.insert(value) === -1) alert(\"Value already exists in the tree!\");else if (this.state.tree.height > 4) {\n        alert(\"Inserting this value will result in a total depth of 6 levels. Maximum depth allowed is 5.\");\n        this.state.tree.delete(value);\n      } else {\n        let node = this.state.tree.getNode(value);\n        this.setState({\n          currentNode: node\n        }, () => this.pathAnimation(node));\n        this.setState({\n          isInputDisabled: true\n        });\n      }\n    }\n  }\n\n  animateNext() {\n    let node = this.state.currentNode;\n    console.log(\"Log Start\");\n    console.log(this.state.animatedNodesKeys.length);\n    console.log(this.state.animatedKeyCounter);\n    console.log(\"Log End\");\n\n    if (this.state.animatedKeyCounter < this.state.animatedNodesKeys.length) {\n      let currNode = this[`nodeRef${this.state.animatedNodesKeys[this.state.animatedKeyCounter]}`].current;\n      this.setState(prevState => ({\n        animatedKeyCounter: prevState.animatedKeyCounter + 1\n      }), () => console.log(this.state));\n      node.value >= currNode.state.value ? currNode.animateGreen() : currNode.animateRed();\n    } else {\n      console.log(\"extra\");\n      console.log(this.state.animatedNodesKeys);\n      this.setState({\n        animatedKeyCounter: 0\n      }, () => this.spawnNode(node));\n    }\n  }\n\n  pathAnimation() {\n    let node = this.state.currentNode;\n    let nodeBinaryString = Number(node.key).toString(2);\n    const keysArray = [];\n\n    for (let index = 1; index < nodeBinaryString.length; index++) {\n      let currentBinaryString = nodeBinaryString.slice(0, index);\n      let currentKey = parseInt(currentBinaryString, 2);\n      keysArray.push(currentKey);\n    }\n\n    this.setState({\n      animatedNodesKeys: keysArray\n    }, function () {\n      this.animateNext(node);\n    });\n  }\n\n  spawnNode(node) {\n    const tempNodeInfo = nodesPositions[node.key - 1];\n    this[`nodeRef${node.key}`] = /*#__PURE__*/createRef();\n\n    const tempNodeCircle = /*#__PURE__*/_jsxDEV(NodeCircle, {\n      id: `nodeID${node.key}`,\n      ref: this[`nodeRef${node.key}`],\n      value: node.value,\n      colStart: tempNodeInfo.colStart,\n      colEnd: tempNodeInfo.colEnd,\n      rowStart: tempNodeInfo.rowStart,\n      rowEnd: tempNodeInfo.rowEnd,\n      animateNode: this.animateNext\n    }, node.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 32\n    }, this);\n\n    let nodesArray = [...this.state.nodesArray];\n    nodesArray[node.key] = tempNodeCircle;\n    let arrowsArray = [...this.state.arrowsArray];\n\n    if (node.key !== 1) {\n      const tempArrowInfo = arrowPositions[node.key - 2];\n\n      const tempArrow = /*#__PURE__*/_jsxDEV(Arrow, {\n        id: `arrowID${node.key}`,\n        ref: this[`arrowRef${node.key}`],\n        colStart: tempArrowInfo.colStart,\n        colEnd: tempArrowInfo.colEnd,\n        rowStart: tempArrowInfo.rowStart,\n        rowEnd: tempArrowInfo.rowEnd,\n        direction: tempArrowInfo.direction\n      }, node.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 31\n      }, this);\n\n      arrowsArray[node.key] = tempArrow;\n    }\n\n    this.setState({\n      nodesArray\n    });\n    this.setState({\n      arrowsArray\n    });\n    this.setState({\n      isInputDisabled: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"header\",\n        children: \"BINARY SEARCH TREE VISUALIZER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"grid\",\n          gridTemplateColumns: \"1fr 6fr\",\n          height: \"93vh\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"sideBar\",\n          style: {\n            gridColumnStart: 1,\n            gridColumnEnd: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleClick,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.number,\n              name: \"number\",\n              placeholder: \"Insert a Value\",\n              onChange: this.handleChange,\n              disabled: this.state.isInputDisabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Insert!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            gridColumnStart: 2,\n            gridColumnEnd: 3,\n            display: \"grid\",\n            gridTemplateRows: \"20% 80%\",\n            padding: \"2.5%\",\n            gridRowGap: \"2.5%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"grid\",\n              gridTemplateColumns: \"20% 80%\",\n              backgroundColor: \"#424242\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                backgroundColor: \"#424242\",\n                alignSelf: \"center\",\n                width: {}\n              },\n              children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n                value: this.state.tree.size,\n                maxValue: 31,\n                text: `${Math.round(this.state.tree.size / 31 * 100)}%`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid\",\n            children: [this.state.nodesArray, this.state.arrowsArray]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Muaath/Desktop/AVL/src/AVLTreeVisualizer/AVLTreeVisualizer.jsx"],"names":["React","Component","createRef","CircularProgressbar","AVLTree","NodeCircle","nodesPositions","Arrow","arrowPositions","AVLTreeVisualizer","constructor","state","number","tree","nodesArray","arrowsArray","animatedNodesKeys","animatedKeyCounter","isInputDisabled","handleChange","bind","handleClick","spawnNode","pathAnimation","animateNext","event","name","value","target","setState","Number","preventDefault","isNaN","alert","size","insert","height","delete","node","getNode","currentNode","console","log","length","currNode","current","prevState","animateGreen","animateRed","nodeBinaryString","key","toString","keysArray","index","currentBinaryString","slice","currentKey","parseInt","push","tempNodeInfo","tempNodeCircle","colStart","colEnd","rowStart","rowEnd","tempArrowInfo","tempArrow","direction","render","display","gridTemplateColumns","gridColumnStart","gridColumnEnd","gridTemplateRows","padding","gridRowGap","backgroundColor","alignSelf","width","Math","round"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\n\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport \"./componentStyles.css\";\r\n\r\nimport AVLTree from \"./AVLTreeClass.js\";\r\nimport NodeCircle from \"./NodeCircle.jsx\";\r\nimport nodesPositions from \"./NodesPositions.js\";\r\nimport Arrow from \"./Arrow.jsx\"\r\nimport arrowPositions from \"./ArrowsPositions\";\r\n\r\nexport default class AVLTreeVisualizer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            number: \"\",\r\n            tree: new AVLTree(),\r\n            nodesArray: [],\r\n            arrowsArray: [],\r\n            animatedNodesKeys: [],\r\n            animatedKeyCounter: 0,\r\n            isInputDisabled: false,\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.spawnNode = this.spawnNode.bind(this);\r\n        this.pathAnimation = this.pathAnimation.bind(this);\r\n        this.animateNext = this.animateNext.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: Number(value)\r\n        })\r\n    }\r\n\r\n    handleClick(event) {\r\n        event.preventDefault();\r\n        if (isNaN(this.state.number)) alert(\"Please insert a number instead\");\r\n        else if (this.state.tree.size === 31) alert(\"Maximum tree size of 31 nodes has been reached!\");\r\n        else if (this.state.number > 9999) alert(\"Please enter a value less than 10,000\");\r\n        else {\r\n            const value = this.state.number;\r\n            if (this.state.tree.insert(value) === -1) alert(\"Value already exists in the tree!\");\r\n            else if (this.state.tree.height > 4) {\r\n                alert(\"Inserting this value will result in a total depth of 6 levels. Maximum depth allowed is 5.\");\r\n                this.state.tree.delete(value);\r\n            }\r\n            else {\r\n                let node = this.state.tree.getNode(value);\r\n                this.setState({ currentNode: node }, () => this.pathAnimation(node));\r\n                this.setState({ isInputDisabled: true });\r\n            }\r\n        }\r\n    }\r\n\r\n    animateNext() {\r\n        let node = this.state.currentNode;\r\n        console.log(\"Log Start\");\r\n        console.log(this.state.animatedNodesKeys.length)\r\n        console.log(this.state.animatedKeyCounter);\r\n        console.log(\"Log End\");\r\n\r\n        if (this.state.animatedKeyCounter < this.state.animatedNodesKeys.length) {\r\n            let currNode = this[`nodeRef${this.state.animatedNodesKeys[this.state.animatedKeyCounter]}`].current;\r\n            this.setState(prevState => ({ animatedKeyCounter: prevState.animatedKeyCounter + 1 }), () => console.log(this.state));\r\n            (node.value >= currNode.state.value) ? currNode.animateGreen() : currNode.animateRed();\r\n        }\r\n        else {\r\n            console.log(\"extra\");\r\n            console.log(this.state.animatedNodesKeys);\r\n            this.setState({ animatedKeyCounter: 0 }, () => this.spawnNode(node));\r\n        }\r\n    }\r\n\r\n    pathAnimation() {\r\n        let node = this.state.currentNode;\r\n        let nodeBinaryString = Number(node.key).toString(2);\r\n        const keysArray = [];\r\n        for (let index = 1; index < nodeBinaryString.length; index++) {\r\n            let currentBinaryString = nodeBinaryString.slice(0, index);\r\n            let currentKey = parseInt(currentBinaryString, 2);\r\n            keysArray.push(currentKey);\r\n        }\r\n\r\n        this.setState({ animatedNodesKeys: keysArray }, function () {\r\n            this.animateNext(node);\r\n        });\r\n    }\r\n\r\n    spawnNode(node) {\r\n        const tempNodeInfo = nodesPositions[node.key - 1];\r\n        this[`nodeRef${node.key}`] = createRef();\r\n\r\n        const tempNodeCircle = <NodeCircle\r\n            id={`nodeID${node.key}`}\r\n            ref={this[`nodeRef${node.key}`]}\r\n            key={node.key}\r\n            value={node.value}\r\n            colStart={tempNodeInfo.colStart}\r\n            colEnd={tempNodeInfo.colEnd}\r\n            rowStart={tempNodeInfo.rowStart}\r\n            rowEnd={tempNodeInfo.rowEnd}\r\n            animateNode={this.animateNext}\r\n        />\r\n\r\n        let nodesArray = [...this.state.nodesArray];\r\n        nodesArray[node.key] = tempNodeCircle;\r\n\r\n        let arrowsArray = [...this.state.arrowsArray];\r\n        if (node.key !== 1) {\r\n            const tempArrowInfo = arrowPositions[node.key - 2];\r\n            const tempArrow = <Arrow\r\n                id={`arrowID${node.key}`}\r\n                ref={this[`arrowRef${node.key}`]}\r\n                key={node.key}\r\n                colStart={tempArrowInfo.colStart}\r\n                colEnd={tempArrowInfo.colEnd}\r\n                rowStart={tempArrowInfo.rowStart}\r\n                rowEnd={tempArrowInfo.rowEnd}\r\n                direction={tempArrowInfo.direction}\r\n            />\r\n            arrowsArray[node.key] = tempArrow;\r\n        }\r\n\r\n        this.setState({ nodesArray });\r\n        this.setState({ arrowsArray });\r\n        this.setState({ isInputDisabled: false });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ height: \"100vh\" }}>\r\n\r\n                <div class=\"header\">\r\n                    BINARY SEARCH TREE VISUALIZER\r\n                </div>\r\n\r\n                <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 6fr\", height: \"93vh\" }}>\r\n                    <div class=\"sideBar\" style={{ gridColumnStart: 1, gridColumnEnd: 2 }}>\r\n                        <form onSubmit={this.handleClick} >\r\n                            <input type=\"text\" value={this.state.number} name=\"number\" placeholder=\"Insert a Value\" onChange={this.handleChange} disabled={this.state.isInputDisabled} />\r\n                            <button type=\"submit\">Insert!</button>\r\n                        </form>\r\n                    </div>\r\n\r\n                    <div style={{ gridColumnStart: 2, gridColumnEnd: 3, display: \"grid\", gridTemplateRows: \"20% 80%\", padding:\"2.5%\", gridRowGap: \"2.5%\"}}>\r\n                        <div style={{ display: \"grid\", gridTemplateColumns: \"20% 80%\", backgroundColor: \"#424242\"}} >\r\n                            <div style={{ backgroundColor: \"#424242\", alignSelf: \"center\", width: {}}}>\r\n                                <CircularProgressbar value={this.state.tree.size} maxValue={31} text={`${Math.round(this.state.tree.size / 31 * 100)}%`} />\r\n                            </div>\r\n                            <div></div>\r\n                        </div>\r\n                        <div className=\"grid\">\r\n                            {this.state.nodesArray}\r\n                            {this.state.arrowsArray}\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}