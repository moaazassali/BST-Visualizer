{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Muaath\\\\Desktop\\\\AVL\\\\src\\\\AVLTreeVisualizer\\\\AVLTreeVisualizer.jsx\";\nimport React, { Component, createRef } from \"react\";\nimport \"./componentStyles.css\";\nimport NodeCircle from \"./NodeCircle.jsx\"; // import Arrow from \"./Arrow.jsx\"\n\nimport nodesPositions from \"./NodesPositions.js\";\nimport AVLTree from \"./AVLTreeClass.js\";\nexport default class AVLTreeVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      number: \"\",\n      tree: new AVLTree(),\n      nodesArray: [],\n      animationDone: false,\n      animatedNodesKeys: [],\n      animatedKeyCounter: 0,\n      currentNode: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.spawnNode = this.spawnNode.bind(this);\n    this.pathAnimation = this.pathAnimation.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: Number(value)\n    });\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    if (isNaN(this.state.number)) alert(\"Please insert a number instead\");else if (this.state.tree.size === 15) alert(\"Maximum tree size of 15 nodes has been reached!\");else if (this.state.number > 9999) alert(\"Please enter a value less than 10,000\");else {\n      const value = this.state.number;\n      if (this.state.tree.insert(value) === -1) alert(\"Value already exists in the tree!\");\n\n      if (this.state.tree.height > 3) {\n        alert(\"Inserting this value will result in a total depth of 5 levels. Maximum depth allowed is 4.\");\n        this.state.tree.delete(value);\n      } else {\n        let node = this.state.tree.getNode(value);\n        if (this.state.nodesArray.length === 0) this.spawnNode(node);else {\n          this.setState({\n            currentNode: node\n          });\n          this.pathAnimation(node);\n        }\n      }\n    }\n  }\n\n  animateNext() {\n    if (this.state.animatedKeyCounter >= this.state.animatedNodesKeys.length) {\n      this.spawnNode(this.state.currentNode);\n      return;\n    }\n\n    let currNode = this[`nodeRef${this.state.animatedNodesKeys[this.state.animatedKeyCounter]}`].current;\n    this.setState(prevState => ({\n      animatedKeyCounter: prevState.animatedKeyCounter + 1\n    }))(this.state.currentNode.value >= currNode.state.value) ? currNode.animateGreen() : currNode.animateRed();\n  }\n\n  pathAnimation(node) {\n    let nodeBinaryString = Number(node.key).toString(2);\n    const keysArray = [];\n\n    for (let index = 1; index < nodeBinaryString.length; index++) {\n      let currentBinaryString = nodeBinaryString.slice(0, index);\n      let currentKey = parseInt(currentBinaryString, 2);\n      keysArray.push = currentKey;\n    }\n\n    this.setState({\n      animatedNodesKeys: keysArray\n    });\n    this.animateNext();\n  }\n\n  spawnNode(node) {\n    const tempNodeInfo = nodesPositions[node.key - 1];\n    this[`nodeRef${node.key}`] = /*#__PURE__*/createRef();\n\n    const tempNodeCircle = /*#__PURE__*/_jsxDEV(NodeCircle, {\n      ref: this[`nodeRef${node.key}`],\n      value: node.value,\n      colStart: tempNodeInfo.colStart,\n      colEnd: tempNodeInfo.colEnd,\n      rowStart: tempNodeInfo.rowStart,\n      rowEnd: tempNodeInfo.rowEnd,\n      animateNext: this.animateNext\n    }, node.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 32\n    }, this);\n\n    let nodesArray = [...this.state.nodesArray];\n    nodesArray[node.key] = tempNodeCircle;\n    this.setState({\n      nodesArray\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleClick,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.number,\n            name: \"number\",\n            placeholder: \"Insert a Value\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Insert!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: [console.log(this.state.nodesArray), this.state.nodesArray]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Muaath/Desktop/AVL/src/AVLTreeVisualizer/AVLTreeVisualizer.jsx"],"names":["React","Component","createRef","NodeCircle","nodesPositions","AVLTree","AVLTreeVisualizer","constructor","state","number","tree","nodesArray","animationDone","animatedNodesKeys","animatedKeyCounter","currentNode","handleChange","bind","handleClick","spawnNode","pathAnimation","event","name","value","target","setState","Number","preventDefault","isNaN","alert","size","insert","height","delete","node","getNode","length","animateNext","currNode","current","prevState","animateGreen","animateRed","nodeBinaryString","key","toString","keysArray","index","currentBinaryString","slice","currentKey","parseInt","push","tempNodeInfo","tempNodeCircle","colStart","colEnd","rowStart","rowEnd","render","console","log"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\r\n\r\nimport \"./componentStyles.css\";\r\nimport NodeCircle from \"./NodeCircle.jsx\";\r\n// import Arrow from \"./Arrow.jsx\"\r\nimport nodesPositions from \"./NodesPositions.js\";\r\nimport AVLTree from \"./AVLTreeClass.js\";\r\n\r\nexport default class AVLTreeVisualizer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            number: \"\",\r\n            tree: new AVLTree(),\r\n            nodesArray: [],\r\n            animationDone: false,\r\n            animatedNodesKeys: [],\r\n            animatedKeyCounter: 0,\r\n            currentNode: null\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.spawnNode = this.spawnNode.bind(this);\r\n        this.pathAnimation = this.pathAnimation.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: Number(value)\r\n        })\r\n    }\r\n\r\n    handleClick(event) {\r\n        event.preventDefault();\r\n        if (isNaN(this.state.number)) alert(\"Please insert a number instead\");\r\n        else if (this.state.tree.size === 15) alert(\"Maximum tree size of 15 nodes has been reached!\");\r\n        else if (this.state.number > 9999) alert(\"Please enter a value less than 10,000\");\r\n        else {\r\n            const value = this.state.number;\r\n            if (this.state.tree.insert(value) === -1) alert(\"Value already exists in the tree!\");\r\n            if (this.state.tree.height > 3) {\r\n                alert(\"Inserting this value will result in a total depth of 5 levels. Maximum depth allowed is 4.\");\r\n                this.state.tree.delete(value);\r\n            }\r\n            else {\r\n                let node = this.state.tree.getNode(value);\r\n                if (this.state.nodesArray.length === 0) this.spawnNode(node);\r\n                else {\r\n                    this.setState({ currentNode: node });\r\n                    this.pathAnimation(node);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    animateNext() {\r\n        if (this.state.animatedKeyCounter >= this.state.animatedNodesKeys.length) {\r\n            this.spawnNode(this.state.currentNode);\r\n            return;\r\n        }\r\n        let currNode = this[`nodeRef${this.state.animatedNodesKeys[this.state.animatedKeyCounter]}`].current;\r\n        this.setState(prevState => ({animatedKeyCounter: prevState.animatedKeyCounter + 1}))\r\n        (this.state.currentNode.value >= currNode.state.value) ? currNode.animateGreen() : currNode.animateRed();\r\n    }\r\n\r\n    pathAnimation(node) {\r\n        let nodeBinaryString = Number(node.key).toString(2);\r\n        const keysArray = [];\r\n        for (let index = 1; index < nodeBinaryString.length; index++) {\r\n            let currentBinaryString = nodeBinaryString.slice(0, index);\r\n            let currentKey = parseInt(currentBinaryString, 2);\r\n            keysArray.push = currentKey;\r\n        }\r\n        this.setState({ animatedNodesKeys: keysArray });\r\n        this.animateNext();\r\n    }\r\n\r\n    spawnNode(node) {\r\n        const tempNodeInfo = nodesPositions[node.key - 1];\r\n        this[`nodeRef${node.key}`] = createRef();\r\n\r\n        const tempNodeCircle = <NodeCircle\r\n            ref={this[`nodeRef${node.key}`]}\r\n            key={node.key}\r\n            value={node.value}\r\n            colStart={tempNodeInfo.colStart}\r\n            colEnd={tempNodeInfo.colEnd}\r\n            rowStart={tempNodeInfo.rowStart}\r\n            rowEnd={tempNodeInfo.rowEnd}\r\n            animateNext={this.animateNext}\r\n        />\r\n\r\n        let nodesArray = [...this.state.nodesArray];\r\n        nodesArray[node.key] = tempNodeCircle;\r\n\r\n        this.setState({ nodesArray });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <form onSubmit={this.handleClick}>\r\n                        <input type=\"text\" value={this.state.number} name=\"number\" placeholder=\"Insert a Value\" onChange={this.handleChange} />\r\n                        <button type=\"submit\">Insert!</button>\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"grid\">\r\n                    {console.log(this.state.nodesArray)}\r\n                    {this.state.nodesArray}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}