{"ast":null,"code":"import Node from \"./NodeClass\";\nexport default class AVLTree {\n  constructor() {\n    this.root = null;\n  }\n\n  height(node) {\n    return node === null ? -1 : node.height;\n  }\n\n  getNode(val) {\n    let current = this.root;\n\n    while (current) {\n      if (val === current.value) {\n        return current;\n      }\n\n      if (parseInt(val) < parseInt(current.value)) {\n        current = current.left;\n      } else {\n        current = current.right;\n      }\n    }\n\n    return current;\n  }\n\n  insert(val) {\n    this.root = this.insertHelper(this.root, val);\n    this.setKey(val);\n  }\n\n  insertHelper(node, val) {\n    if (node === null) return new Node(val);\n    if (val < node.value) node.left = this.insertHelper(node.left, val);else if (val > node.value) node.right = this.insertHelper(node.right, val);\n    return node;\n  }\n\n  setKey(val) {\n    let current = this.root;\n    let binaryArray = [1];\n\n    while (current) {\n      if (val === current.value) {\n        break;\n      }\n\n      if (val > current.value) {\n        current = current.right;\n        binaryArray.push(1);\n      } else {\n        current = current.left;\n        binaryArray.push(0);\n      }\n    }\n\n    const binaryString = binaryArray.join(\"\");\n    current.key = parseInt(binaryString, 2);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Muaath/Desktop/AVL/src/AVLTreeVisualizer/AVLTreeClass.js"],"names":["Node","AVLTree","constructor","root","height","node","getNode","val","current","value","parseInt","left","right","insert","insertHelper","setKey","binaryArray","push","binaryString","join","key"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AAEA,eAAe,MAAMC,OAAN,CAAc;AACzBC,EAAAA,WAAW,GAAG;AACV,SAAKC,IAAL,GAAY,IAAZ;AACH;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,WAAOA,IAAI,KAAK,IAAT,GAAgB,CAAC,CAAjB,GAAqBA,IAAI,CAACD,MAAjC;AACH;;AAEDE,EAAAA,OAAO,CAACC,GAAD,EAAM;AACT,QAAIC,OAAO,GAAG,KAAKL,IAAnB;;AACA,WAAOK,OAAP,EAAgB;AACZ,UAAID,GAAG,KAAKC,OAAO,CAACC,KAApB,EAA2B;AACvB,eAAOD,OAAP;AACH;;AACD,UAAIE,QAAQ,CAACH,GAAD,CAAR,GAAgBG,QAAQ,CAACF,OAAO,CAACC,KAAT,CAA5B,EAA6C;AACzCD,QAAAA,OAAO,GAAGA,OAAO,CAACG,IAAlB;AACH,OAFD,MAEO;AACHH,QAAAA,OAAO,GAAGA,OAAO,CAACI,KAAlB;AACH;AACJ;;AACD,WAAOJ,OAAP;AACH;;AAEDK,EAAAA,MAAM,CAACN,GAAD,EAAM;AACR,SAAKJ,IAAL,GAAY,KAAKW,YAAL,CAAkB,KAAKX,IAAvB,EAA6BI,GAA7B,CAAZ;AACA,SAAKQ,MAAL,CAAYR,GAAZ;AACH;;AAEDO,EAAAA,YAAY,CAACT,IAAD,EAAOE,GAAP,EAAY;AACpB,QAAIF,IAAI,KAAK,IAAb,EAAmB,OAAO,IAAIL,IAAJ,CAASO,GAAT,CAAP;AAEnB,QAAIA,GAAG,GAAGF,IAAI,CAACI,KAAf,EAAsBJ,IAAI,CAACM,IAAL,GAAY,KAAKG,YAAL,CAAkBT,IAAI,CAACM,IAAvB,EAA6BJ,GAA7B,CAAZ,CAAtB,KACK,IAAIA,GAAG,GAAGF,IAAI,CAACI,KAAf,EAAsBJ,IAAI,CAACO,KAAL,GAAa,KAAKE,YAAL,CAAkBT,IAAI,CAACO,KAAvB,EAA8BL,GAA9B,CAAb;AAE3B,WAAOF,IAAP;AACH;;AAEDU,EAAAA,MAAM,CAACR,GAAD,EAAM;AACR,QAAIC,OAAO,GAAG,KAAKL,IAAnB;AACA,QAAIa,WAAW,GAAG,CAAC,CAAD,CAAlB;;AACA,WAAOR,OAAP,EAAgB;AACZ,UAAID,GAAG,KAAKC,OAAO,CAACC,KAApB,EAA2B;AACvB;AACH;;AACD,UAAIF,GAAG,GAAGC,OAAO,CAACC,KAAlB,EAAyB;AACrBD,QAAAA,OAAO,GAAGA,OAAO,CAACI,KAAlB;AACAI,QAAAA,WAAW,CAACC,IAAZ,CAAiB,CAAjB;AACH,OAHD,MAGO;AACHT,QAAAA,OAAO,GAAGA,OAAO,CAACG,IAAlB;AACAK,QAAAA,WAAW,CAACC,IAAZ,CAAiB,CAAjB;AACH;AACJ;;AACD,UAAMC,YAAY,GAAGF,WAAW,CAACG,IAAZ,CAAiB,EAAjB,CAArB;AACAX,IAAAA,OAAO,CAACY,GAAR,GAAcV,QAAQ,CAACQ,YAAD,EAAe,CAAf,CAAtB;AACH;;AAvDwB","sourcesContent":["import Node from \"./NodeClass\"\r\n\r\nexport default class AVLTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node) {\r\n        return node === null ? -1 : node.height;\r\n    }\r\n\r\n    getNode(val) {\r\n        let current = this.root;\r\n        while (current) {\r\n            if (val === current.value) {\r\n                return current;\r\n            }\r\n            if (parseInt(val) < parseInt(current.value)) {\r\n                current = current.left;\r\n            } else {\r\n                current = current.right;\r\n            }\r\n        }\r\n        return current;\r\n    }\r\n\r\n    insert(val) {\r\n        this.root = this.insertHelper(this.root, val);\r\n        this.setKey(val);\r\n    }\r\n\r\n    insertHelper(node, val) {\r\n        if (node === null) return new Node(val);\r\n\r\n        if (val < node.value) node.left = this.insertHelper(node.left, val);\r\n        else if (val > node.value) node.right = this.insertHelper(node.right, val);\r\n\r\n        return node;\r\n    }\r\n\r\n    setKey(val) {\r\n        let current = this.root;\r\n        let binaryArray = [1];\r\n        while (current) {\r\n            if (val === current.value) {\r\n                break;\r\n            }\r\n            if (val > current.value) {\r\n                current = current.right;\r\n                binaryArray.push(1);\r\n            } else {\r\n                current = current.left;\r\n                binaryArray.push(0);\r\n            }\r\n        }\r\n        const binaryString = binaryArray.join(\"\");\r\n        current.key = parseInt(binaryString, 2);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}