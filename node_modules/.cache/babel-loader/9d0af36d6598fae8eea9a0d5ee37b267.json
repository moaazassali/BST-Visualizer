{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Muaath\\\\Desktop\\\\AVL\\\\src\\\\AVLTreeVisualizer\\\\AVLTreeVisualizer.jsx\";\nimport React, { Component, createRef } from \"react\";\nimport \"./componentStyles.css\";\nimport NodeCircle from \"./NodeCircle.jsx\"; // import Arrow from \"./Arrow.jsx\"\n\nimport nodesPositions from \"./NodesPositions.js\";\nimport AVLTree from \"./AVLTreeClass.js\";\nexport default class AVLTreeVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      number: \"\",\n      tree: new AVLTree(),\n      nodesArray: [],\n      animationDone: false,\n      animatedNodesKeys: [],\n      animatedKeyCounter: 0,\n      doneInitialization: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.spawnNode = this.spawnNode.bind(this);\n    this.pathAnimation = this.pathAnimation.bind(this);\n    this.animateNext = this.animateNext.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: Number(value)\n    });\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    if (isNaN(this.state.number)) alert(\"Please insert a number instead\");else if (this.state.tree.size === 15) alert(\"Maximum tree size of 15 nodes has been reached!\");else if (this.state.number > 9999) alert(\"Please enter a value less than 10,000\");else {\n      const value = this.state.number;\n      if (this.state.tree.insert(value) === -1) alert(\"Value already exists in the tree!\");\n\n      if (this.state.tree.height > 3) {\n        alert(\"Inserting this value will result in a total depth of 5 levels. Maximum depth allowed is 4.\");\n        this.state.tree.delete(value);\n      } else {\n        let node = this.state.tree.getNode(value);\n        this.setState({\n          currentNode: node\n        }, () => this.pathAnimation(node)); // if (this.state.nodesArray.length < 1) this.spawnNode(node);\n        // else \n      }\n    }\n  }\n\n  animateNext() {\n    let node = this.state.currentNode;\n    console.log(\"Log Start\");\n    console.log(this.state.animatedNodesKeys.length);\n    console.log(this.state.animatedKeyCounter);\n    console.log(\"Log End\");\n\n    if (this.state.animatedKeyCounter < this.state.animatedNodesKeys.length) {\n      let currNode = this[`nodeRef${this.state.animatedNodesKeys[this.state.animatedKeyCounter]}`].current;\n      this.setState(prevState => ({\n        animatedKeyCounter: prevState.animatedKeyCounter + 1\n      }), () => console.log(this.state));\n      node.value >= currNode.state.value ? currNode.animateGreen() : currNode.animateRed();\n    } else {\n      console.log(\"extra\");\n      console.log(this.state.animatedNodesKeys);\n      this.setState({\n        animatedKeyCounter: 0\n      }, () => this.spawnNode(node));\n    }\n  }\n\n  pathAnimation() {\n    let node = this.state.currentNode;\n    let nodeBinaryString = Number(node.key).toString(2);\n    const keysArray = [];\n\n    for (let index = 1; index < nodeBinaryString.length; index++) {\n      let currentBinaryString = nodeBinaryString.slice(0, index);\n      let currentKey = parseInt(currentBinaryString, 2);\n      keysArray.push(currentKey);\n    }\n\n    this.setState({\n      animatedNodesKeys: keysArray\n    }, function () {\n      this.animateNext(node);\n    });\n  }\n\n  spawnNode(node) {\n    const tempNodeInfo = nodesPositions[node.key - 1];\n    this[`nodeRef${node.key}`] = /*#__PURE__*/createRef();\n\n    const tempNodeCircle = /*#__PURE__*/_jsxDEV(NodeCircle, {\n      ref: this[`nodeRef${node.key}`],\n      value: node.value,\n      colStart: tempNodeInfo.colStart,\n      colEnd: tempNodeInfo.colEnd,\n      rowStart: tempNodeInfo.rowStart,\n      rowEnd: tempNodeInfo.rowEnd,\n      animateNode: this.animateNext\n    }, node.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 32\n    }, this);\n\n    let nodesArray = [...this.state.nodesArray];\n    nodesArray[node.key] = tempNodeCircle;\n    this.setState({\n      nodesArray\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleClick,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.number,\n            name: \"number\",\n            placeholder: \"Insert a Value\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Insert!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: this.state.nodesArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Muaath/Desktop/AVL/src/AVLTreeVisualizer/AVLTreeVisualizer.jsx"],"names":["React","Component","createRef","NodeCircle","nodesPositions","AVLTree","AVLTreeVisualizer","constructor","state","number","tree","nodesArray","animationDone","animatedNodesKeys","animatedKeyCounter","doneInitialization","handleChange","bind","handleClick","spawnNode","pathAnimation","animateNext","event","name","value","target","setState","Number","preventDefault","isNaN","alert","size","insert","height","delete","node","getNode","currentNode","console","log","length","currNode","current","prevState","animateGreen","animateRed","nodeBinaryString","key","toString","keysArray","index","currentBinaryString","slice","currentKey","parseInt","push","tempNodeInfo","tempNodeCircle","colStart","colEnd","rowStart","rowEnd","render"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\r\n\r\nimport \"./componentStyles.css\";\r\nimport NodeCircle from \"./NodeCircle.jsx\";\r\n// import Arrow from \"./Arrow.jsx\"\r\nimport nodesPositions from \"./NodesPositions.js\";\r\nimport AVLTree from \"./AVLTreeClass.js\";\r\n\r\nexport default class AVLTreeVisualizer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            number: \"\",\r\n            tree: new AVLTree(),\r\n            nodesArray: [],\r\n            animationDone: false,\r\n            animatedNodesKeys: [],\r\n            animatedKeyCounter: 0,\r\n            doneInitialization: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.spawnNode = this.spawnNode.bind(this);\r\n        this.pathAnimation = this.pathAnimation.bind(this);\r\n        this.animateNext = this.animateNext.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: Number(value)\r\n        })\r\n    }\r\n\r\n    handleClick(event) {\r\n        event.preventDefault();\r\n        if (isNaN(this.state.number)) alert(\"Please insert a number instead\");\r\n        else if (this.state.tree.size === 15) alert(\"Maximum tree size of 15 nodes has been reached!\");\r\n        else if (this.state.number > 9999) alert(\"Please enter a value less than 10,000\");\r\n        else {\r\n            const value = this.state.number;\r\n            if (this.state.tree.insert(value) === -1) alert(\"Value already exists in the tree!\");\r\n            if (this.state.tree.height > 3) {\r\n                alert(\"Inserting this value will result in a total depth of 5 levels. Maximum depth allowed is 4.\");\r\n                this.state.tree.delete(value);\r\n            }\r\n            else {\r\n                let node = this.state.tree.getNode(value);\r\n                this.setState({ currentNode: node }, () => this.pathAnimation(node));\r\n                // if (this.state.nodesArray.length < 1) this.spawnNode(node);\r\n                // else \r\n            }\r\n        }\r\n    }\r\n\r\n    animateNext() {\r\n        let node = this.state.currentNode;\r\n        console.log(\"Log Start\");\r\n        console.log(this.state.animatedNodesKeys.length)\r\n        console.log(this.state.animatedKeyCounter);\r\n        console.log(\"Log End\");\r\n\r\n        if (this.state.animatedKeyCounter < this.state.animatedNodesKeys.length) {\r\n            let currNode = this[`nodeRef${this.state.animatedNodesKeys[this.state.animatedKeyCounter]}`].current;\r\n            this.setState(prevState => ({ animatedKeyCounter: prevState.animatedKeyCounter + 1 }), () => console.log(this.state));\r\n            (node.value >= currNode.state.value) ? currNode.animateGreen() : currNode.animateRed();\r\n        }\r\n        else {\r\n            console.log(\"extra\");\r\n            console.log(this.state.animatedNodesKeys)\r\n            this.setState({ animatedKeyCounter: 0 }, () => this.spawnNode(node));\r\n        }\r\n    }\r\n\r\n    pathAnimation() {\r\n        let node = this.state.currentNode;\r\n        let nodeBinaryString = Number(node.key).toString(2);\r\n        const keysArray = [];\r\n        for (let index = 1; index < nodeBinaryString.length; index++) {\r\n            let currentBinaryString = nodeBinaryString.slice(0, index);\r\n            let currentKey = parseInt(currentBinaryString, 2);\r\n            keysArray.push(currentKey);\r\n        }\r\n\r\n        this.setState({ animatedNodesKeys: keysArray }, function () {\r\n            this.animateNext(node);\r\n        });\r\n\r\n    }\r\n\r\n    spawnNode(node) {\r\n        const tempNodeInfo = nodesPositions[node.key - 1];\r\n        this[`nodeRef${node.key}`] = createRef();\r\n\r\n        const tempNodeCircle = <NodeCircle\r\n            ref={this[`nodeRef${node.key}`]}\r\n            key={node.key}\r\n            value={node.value}\r\n            colStart={tempNodeInfo.colStart}\r\n            colEnd={tempNodeInfo.colEnd}\r\n            rowStart={tempNodeInfo.rowStart}\r\n            rowEnd={tempNodeInfo.rowEnd}\r\n            animateNode={this.animateNext}\r\n        />\r\n\r\n        let nodesArray = [...this.state.nodesArray];\r\n        nodesArray[node.key] = tempNodeCircle;\r\n\r\n        this.setState({ nodesArray });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <form onSubmit={this.handleClick}>\r\n                        <input type=\"text\" value={this.state.number} name=\"number\" placeholder=\"Insert a Value\" onChange={this.handleChange} />\r\n                        <button type=\"submit\">Insert!</button>\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"grid\">\r\n                    {this.state.nodesArray}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}