{"ast":null,"code":"import Node from \"./NodeClass\";\nexport default class AVLTree {\n  constructor() {\n    this.root = null;\n  }\n\n  setRoot(val) {\n    this.root = new Node(val);\n  }\n\n  height(node) {\n    return node === null ? -1 : node.height;\n  }\n\n  insert(val) {\n    return this.insertRec(this.root, val);\n  }\n\n  insertRec(node, val) {\n    if (node === null) return node = new Node(val);\n    if (val < node.value) node.left = this.insertRec(node.left, val);else if (val > node.value) node.right = this.insertRec(node.right, val);else return node;\n    node.height = 1 + Math.max(this.height(node.left), this.height(node.right));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Muaath/Desktop/AVL/src/AVLTreeVisualizer/AVLTreeClass.js"],"names":["Node","AVLTree","constructor","root","setRoot","val","height","node","insert","insertRec","value","left","right","Math","max"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AAEA,eAAe,MAAMC,OAAN,CAAc;AACzBC,EAAAA,WAAW,GAAG;AACV,SAAKC,IAAL,GAAY,IAAZ;AACH;;AAEDC,EAAAA,OAAO,CAACC,GAAD,EAAM;AACT,SAAKF,IAAL,GAAY,IAAIH,IAAJ,CAASK,GAAT,CAAZ;AACH;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,WAAOA,IAAI,KAAK,IAAT,GAAgB,CAAC,CAAjB,GAAqBA,IAAI,CAACD,MAAjC;AACH;;AAEDE,EAAAA,MAAM,CAACH,GAAD,EAAM;AACR,WAAO,KAAKI,SAAL,CAAe,KAAKN,IAApB,EAA0BE,GAA1B,CAAP;AACH;;AAEDI,EAAAA,SAAS,CAACF,IAAD,EAAOF,GAAP,EAAY;AACjB,QAAIE,IAAI,KAAK,IAAb,EAAmB,OAAQA,IAAI,GAAG,IAAIP,IAAJ,CAASK,GAAT,CAAf;AAEnB,QAAIA,GAAG,GAAGE,IAAI,CAACG,KAAf,EAAsBH,IAAI,CAACI,IAAL,GAAY,KAAKF,SAAL,CAAeF,IAAI,CAACI,IAApB,EAA0BN,GAA1B,CAAZ,CAAtB,KACK,IAAIA,GAAG,GAAGE,IAAI,CAACG,KAAf,EAAsBH,IAAI,CAACK,KAAL,GAAa,KAAKH,SAAL,CAAeF,IAAI,CAACK,KAApB,EAA2BP,GAA3B,CAAb,CAAtB,KACA,OAAOE,IAAP;AAELA,IAAAA,IAAI,CAACD,MAAL,GAAc,IAAIO,IAAI,CAACC,GAAL,CAAS,KAAKR,MAAL,CAAYC,IAAI,CAACI,IAAjB,CAAT,EAAiC,KAAKL,MAAL,CAAYC,IAAI,CAACK,KAAjB,CAAjC,CAAlB;AACH;;AAzBwB","sourcesContent":["import Node from \"./NodeClass\"\r\n\r\nexport default class AVLTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    setRoot(val) {\r\n        this.root = new Node(val);\r\n    }\r\n\r\n    height(node) {\r\n        return node === null ? -1 : node.height;\r\n    }\r\n\r\n    insert(val) {\r\n        return this.insertRec(this.root, val);\r\n    }\r\n\r\n    insertRec(node, val) {\r\n        if (node === null) return (node = new Node(val));\r\n\r\n        if (val < node.value) node.left = this.insertRec(node.left, val);\r\n        else if (val > node.value) node.right = this.insertRec(node.right, val);\r\n        else return node;\r\n\r\n        node.height = 1 + Math.max(this.height(node.left), this.height(node.right));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}