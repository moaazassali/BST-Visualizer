{"ast":null,"code":"import _classCallCheck from\"C:/Users/Muaath/Desktop/AVL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Muaath/Desktop/AVL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import Node from\"./NodeClass\";var AVLTree=/*#__PURE__*/function(){function AVLTree(){_classCallCheck(this,AVLTree);this.root=null;this.size=0;this.height=-1;}_createClass(AVLTree,[{key:\"height\",value:function height(node){return node===null?-1:node.height;}},{key:\"calculateTreeHeight\",value:function calculateTreeHeight(){this.height=this.root.height=this.calculateHeight(this.root);}},{key:\"calculateHeight\",value:function calculateHeight(node){if(node===null)return-1;else{var leftHeight=this.calculateHeight(node.left);var rightHeight=this.calculateHeight(node.right);return 1+Math.max(leftHeight,rightHeight);}}},{key:\"getNode\",value:function getNode(val){var current=this.root;while(current){if(val===current.value){return current;}if(val<Number(current.value)){current=current.left;}else{current=current.right;}}return current;}},{key:\"insert\",value:function insert(val){if(this.getNode(val))return-1;this.root=this.insertHelper(this.root,val);this.setKey(val);this.size+=1;this.calculateTreeHeight();}},{key:\"insertHelper\",value:function insertHelper(node,val){if(node===null)return new Node(val);if(val<node.value){var leftChild=this.insertHelper(node.left,val);node.left=leftChild;leftChild.parent=node;}else if(val>node.value){var rightChild=this.insertHelper(node.right,val);node.right=rightChild;rightChild.parent=node;}return node;}},{key:\"delete\",value:function _delete(val){var node=this.getNode(val);if(node.value>node.parent.value)node.parent.right=null;else node.parent.left=null;node.parent=null;this.size-=1;}},{key:\"setKey\",value:function setKey(val){var current=this.root;var binaryArray=[1];while(current){if(val===current.value){break;}if(val>current.value){current=current.right;binaryArray.push(1);}else{current=current.left;binaryArray.push(0);}}var binaryString=binaryArray.join(\"\");current.key=parseInt(binaryString,2);}}]);return AVLTree;}();export{AVLTree as default};","map":{"version":3,"sources":["C:/Users/Muaath/Desktop/AVL/src/AVLTreeVisualizer/AVLTreeClass.js"],"names":["Node","AVLTree","root","size","height","node","calculateHeight","leftHeight","left","rightHeight","right","Math","max","val","current","value","Number","getNode","insertHelper","setKey","calculateTreeHeight","leftChild","parent","rightChild","binaryArray","push","binaryString","join","key","parseInt"],"mappings":"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","sourcesContent":["import Node from \"./NodeClass\"\r\n\r\nexport default class AVLTree {\r\n    constructor() {\r\n        this.root = null;\r\n        this.size = 0;\r\n        this.height = -1;\r\n    }\r\n\r\n    height(node) {\r\n        return node === null ? -1 : node.height;\r\n    }\r\n\r\n    calculateTreeHeight() {\r\n        this.height = this.root.height = this.calculateHeight(this.root);\r\n    }\r\n\r\n    calculateHeight(node) {\r\n        if (node === null) return -1;\r\n        else {\r\n            let leftHeight = this.calculateHeight(node.left);\r\n            let rightHeight = this.calculateHeight(node.right);\r\n            return 1 + Math.max(leftHeight, rightHeight);\r\n        }\r\n    }\r\n\r\n    getNode(val) {\r\n        let current = this.root;\r\n        while (current) {\r\n            if (val === current.value) {\r\n                return current;\r\n            }\r\n            if (val < Number(current.value)) {\r\n                current = current.left;\r\n            } else {\r\n                current = current.right;\r\n            }\r\n        }\r\n        return current;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.getNode(val)) return -1;\r\n        this.root = this.insertHelper(this.root, val);\r\n        this.setKey(val);\r\n        this.size += 1;\r\n        this.calculateTreeHeight();\r\n    }\r\n\r\n    insertHelper(node, val) {\r\n        if (node === null) return new Node(val);\r\n\r\n        if (val < node.value) {\r\n            let leftChild = this.insertHelper(node.left, val);\r\n            node.left = leftChild;\r\n            leftChild.parent = node;\r\n        }\r\n        else if (val > node.value) {\r\n            let rightChild = this.insertHelper(node.right, val);\r\n            node.right = rightChild;\r\n            rightChild.parent = node;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    delete(val) {\r\n        let node = this.getNode(val);\r\n        if (node.value > node.parent.value) node.parent.right = null;\r\n        else node.parent.left = null;\r\n        node.parent = null;\r\n        this.size -= 1;\r\n    }\r\n\r\n    setKey(val) {\r\n        let current = this.root;\r\n        let binaryArray = [1];\r\n        while (current) {\r\n            if (val === current.value) {\r\n                break;\r\n            }\r\n            if (val > current.value) {\r\n                current = current.right;\r\n                binaryArray.push(1);\r\n            } else {\r\n                current = current.left;\r\n                binaryArray.push(0);\r\n            }\r\n        }\r\n        const binaryString = binaryArray.join(\"\");\r\n        current.key = parseInt(binaryString, 2);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}