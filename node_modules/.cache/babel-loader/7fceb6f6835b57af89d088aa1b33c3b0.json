{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import _toConsumableArray from\"C:/Users/Muaath/Desktop/AVL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import _defineProperty from\"C:/Users/Muaath/Desktop/AVL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:/Users/Muaath/Desktop/AVL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Muaath/Desktop/AVL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:/Users/Muaath/Desktop/AVL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/Users/Muaath/Desktop/AVL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Muaath/Desktop/AVL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component,createRef}from\"react\";import{CircularProgressbarWithChildren,buildStyles}from'react-circular-progressbar';import'react-circular-progressbar/dist/styles.css';import\"./componentStyles.css\";import\"./inputfield.scss\";import\"./addbutton.css\";import AVLTree from\"./AVLTreeClass.js\";import NodeCircle from\"./NodeCircle.jsx\";import nodesPositions from\"./NodesPositions.js\";import Arrow from\"./Arrow.jsx\";import arrowPositions from\"./ArrowsPositions\";var AVLTreeVisualizer=/*#__PURE__*/function(_Component){_inherits(AVLTreeVisualizer,_Component);var _super=_createSuper(AVLTreeVisualizer);function AVLTreeVisualizer(){var _this;_classCallCheck(this,AVLTreeVisualizer);_this=_super.call(this);_this.state={number:\"\",tree:new AVLTree(),nodesArray:[],arrowsArray:[],animatedNodesKeys:[],animatedKeyCounter:0,isInputDisabled:false};_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this));_this.handleClick=_this.handleClick.bind(_assertThisInitialized(_this));_this.spawnNode=_this.spawnNode.bind(_assertThisInitialized(_this));_this.pathAnimation=_this.pathAnimation.bind(_assertThisInitialized(_this));_this.animateNext=_this.animateNext.bind(_assertThisInitialized(_this));return _this;}_createClass(AVLTreeVisualizer,[{key:\"handleChange\",value:function handleChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;this.setState(_defineProperty({},name,Number(value)));}},{key:\"handleClick\",value:function handleClick(event){var _this2=this;event.preventDefault();if(this.state.number===\"\")return;if(isNaN(this.state.number)){alert(\"Please insert a number instead\");this.setState({number:\"\"});}else if(this.state.tree.size===31){alert(\"Maximum tree size of 31 nodes has been reached!\");this.setState({number:\"\"});}else if(this.state.number>9999){alert(\"Please enter a value less than 10,000\");this.setState({number:\"\"});}else{var value=this.state.number;if(this.state.tree.insert(value)===-1){alert(\"Value already exists in the tree!\");this.setState({number:\"\"});}else if(this.state.tree.height>4){alert(\"Inserting this value will result in a total depth of 6 levels. Maximum depth allowed is 5.\");this.setState({number:\"\"});this.state.tree.delete(value);}else{var node=this.state.tree.getNode(value);this.setState({currentNode:node},function(){return _this2.pathAnimation(node);});this.setState({isInputDisabled:true});}}}},{key:\"animateNext\",value:function animateNext(){var _this3=this;var node=this.state.currentNode;// console.log(\"Log Start\");\n// console.log(this.state.animatedNodesKeys.length)\n// console.log(this.state.animatedKeyCounter);\n// console.log(\"Log End\");\nif(this.state.animatedKeyCounter<this.state.animatedNodesKeys.length){var currNode=this[\"nodeRef\".concat(this.state.animatedNodesKeys[this.state.animatedKeyCounter])].current;this.setState(function(prevState){return{animatedKeyCounter:prevState.animatedKeyCounter+1};});node.value>=currNode.state.value?currNode.animateGreen():currNode.animateRed();}else{// console.log(\"extra\");\n// console.log(this.state.animatedNodesKeys);\nthis.setState({animatedKeyCounter:0},function(){return _this3.spawnNode(node);});}}},{key:\"pathAnimation\",value:function pathAnimation(){var node=this.state.currentNode;var nodeBinaryString=Number(node.key).toString(2);var keysArray=[];for(var index=1;index<nodeBinaryString.length;index++){var currentBinaryString=nodeBinaryString.slice(0,index);var currentKey=parseInt(currentBinaryString,2);keysArray.push(currentKey);}this.setState({animatedNodesKeys:keysArray},function(){this.animateNext(node);});}},{key:\"spawnNode\",value:function spawnNode(node){var tempNodeInfo=nodesPositions[node.key-1];this[\"nodeRef\".concat(node.key)]=/*#__PURE__*/createRef();var tempNodeCircle=/*#__PURE__*/_jsx(NodeCircle,{id:\"nodeID\".concat(node.key),ref:this[\"nodeRef\".concat(node.key)],value:node.value,colStart:tempNodeInfo.colStart,colEnd:tempNodeInfo.colEnd,rowStart:tempNodeInfo.rowStart,rowEnd:tempNodeInfo.rowEnd,animateNode:this.animateNext},node.key);var nodesArray=_toConsumableArray(this.state.nodesArray);nodesArray[node.key]=tempNodeCircle;var arrowsArray=_toConsumableArray(this.state.arrowsArray);if(node.key!==1){var tempArrowInfo=arrowPositions[node.key-2];var tempArrow=/*#__PURE__*/_jsx(Arrow,{id:\"arrowID\".concat(node.key),ref:this[\"arrowRef\".concat(node.key)],colStart:tempArrowInfo.colStart,colEnd:tempArrowInfo.colEnd,rowStart:tempArrowInfo.rowStart,rowEnd:tempArrowInfo.rowEnd,direction:tempArrowInfo.direction},node.key);arrowsArray[node.key]=tempArrow;}this.setState({nodesArray:nodesArray});this.setState({arrowsArray:arrowsArray});this.setState({isInputDisabled:false});this.setState({number:\"\"});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{style:{height:\"100vh\"},children:[/*#__PURE__*/_jsx(\"div\",{className:\"header\",children:\"BINARY SEARCH TREE VISUALIZER\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"1fr 6fr\",height:\"93vh\"},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sideBar\",style:{gridColumnStart:1,gridColumnEnd:2},children:[/*#__PURE__*/_jsx(\"form\",{onSubmit:this.handleClick,children:/*#__PURE__*/_jsxs(\"div\",{className:\"form__group field\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:this.state.number,className:\"form__field\",id:\"name\",placeholder:\"Insert a Value\",name:\"number\",onChange:this.handleChange,disabled:this.state.isInputDisabled}),/*#__PURE__*/_jsx(\"label\",{for:\"name\",className:\"form__label\",children:\"Insert value\"})]})}),/*#__PURE__*/_jsxs(\"a\",{className:\"bt more-bt\",onClick:this.handleClick,children:[/*#__PURE__*/_jsx(\"span\",{className:\"fl\"}),/*#__PURE__*/_jsx(\"span\",{className:\"sfl\"}),/*#__PURE__*/_jsx(\"span\",{className:\"cross\"}),/*#__PURE__*/_jsx(\"i\",{}),/*#__PURE__*/_jsx(\"div\",{children:\"add\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"otherInfo\",style:{marginTop:\"auto\"},children:[/*#__PURE__*/_jsxs(\"span\",{style:{fontSize:\"1.2em\",color:\"white\"},children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Changelog:\"}),\" \"]}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\" Added a circular bar representing the size of the tree\"}),/*#__PURE__*/_jsx(\"li\",{children:\" Added new style and animations to the insert field and button\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"otherInfo\",children:[/*#__PURE__*/_jsxs(\"span\",{style:{fontSize:\"1.2em\",color:\"white\"},children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Planned Features:\"}),\" \"]}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\" Animating the arrows with color as well \"}),/*#__PURE__*/_jsx(\"li\",{children:\" Adding a slider to change animation speed \"}),/*#__PURE__*/_jsx(\"li\",{children:\" An option to delete specific nodes\"}),/*#__PURE__*/_jsx(\"li\",{children:\" Implementing AVL tree data structure \"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{gridColumnStart:2,gridColumnEnd:3,display:\"grid\",gridTemplateRows:\"20% 80%\",padding:\"1% 1% 2.5% 1%\",gridRowGap:\"2.5%\"},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"9% 90%\",height:\"100%\",gridColumnGap:\"1%\"},children:[/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:\"#424242\",borderRadius:\"2vh\",alignSelf:\"center\",padding:\"5%\"},children:[/*#__PURE__*/_jsx(CircularProgressbarWithChildren,{value:this.state.tree.size,maxValue:31,text:\"\".concat(Math.round(this.state.tree.size/31*100),\"%\"),circleRatio:0.75,styles:buildStyles({rotation:1/2+1/8,pathColor:\"#ba68c8\",textColor:\"#ba68c8\"})}),/*#__PURE__*/_jsxs(\"div\",{style:{color:\"white\",textAlign:\"center\",fontSize:\"1.2em\"},children:[\" \",/*#__PURE__*/_jsxs(\"strong\",{children:[\"Size: \".concat(this.state.tree.size,\" /31\"),\" \"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:\"#424242\",borderRadius:\"2vh\",padding:\"1%\",color:\"white\"},children:[/*#__PURE__*/_jsxs(\"span\",{style:{fontSize:\"1.5em\"},children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Tutorial:\"}),\" \"]}),\" \",/*#__PURE__*/_jsx(\"br\",{}),\"  \",/*#__PURE__*/_jsx(\"br\",{}),\"Simply use the interface on the left to interact with the tree by adding a value anywhere from 0 to 9,999. \",/*#__PURE__*/_jsx(\"br\",{}),\" \",/*#__PURE__*/_jsx(\"br\",{}),\"Limitations: Negative values are not accepted / Repeated values are not accepted / Maximum depth of 5 levels / Maximum of 31 nodes\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid\",children:[this.state.nodesArray,this.state.arrowsArray]})]})]})]});}}]);return AVLTreeVisualizer;}(Component);export{AVLTreeVisualizer as default};","map":{"version":3,"sources":["C:/Users/Muaath/Desktop/AVL/src/AVLTreeVisualizer/AVLTreeVisualizer.jsx"],"names":["React","Component","createRef","CircularProgressbarWithChildren","buildStyles","AVLTree","NodeCircle","nodesPositions","Arrow","arrowPositions","AVLTreeVisualizer","state","number","tree","nodesArray","arrowsArray","animatedNodesKeys","animatedKeyCounter","isInputDisabled","handleChange","bind","handleClick","spawnNode","pathAnimation","animateNext","event","target","name","value","setState","Number","preventDefault","isNaN","alert","size","insert","height","delete","node","getNode","currentNode","length","currNode","current","prevState","animateGreen","animateRed","nodeBinaryString","key","toString","keysArray","index","currentBinaryString","slice","currentKey","parseInt","push","tempNodeInfo","tempNodeCircle","colStart","colEnd","rowStart","rowEnd","tempArrowInfo","tempArrow","direction","display","gridTemplateColumns","gridColumnStart","gridColumnEnd","marginTop","fontSize","color","gridTemplateRows","padding","gridRowGap","gridColumnGap","backgroundColor","borderRadius","alignSelf","Math","round","rotation","pathColor","textColor","textAlign"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\r\nimport { CircularProgressbarWithChildren, buildStyles } from 'react-circular-progressbar';\r\n\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport \"./componentStyles.css\";\r\nimport \"./inputfield.scss\";\r\nimport \"./addbutton.css\";\r\n\r\nimport AVLTree from \"./AVLTreeClass.js\";\r\nimport NodeCircle from \"./NodeCircle.jsx\";\r\nimport nodesPositions from \"./NodesPositions.js\";\r\nimport Arrow from \"./Arrow.jsx\"\r\nimport arrowPositions from \"./ArrowsPositions\";\r\n\r\nexport default class AVLTreeVisualizer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            number: \"\",\r\n            tree: new AVLTree(),\r\n            nodesArray: [],\r\n            arrowsArray: [],\r\n            animatedNodesKeys: [],\r\n            animatedKeyCounter: 0,\r\n            isInputDisabled: false,\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.spawnNode = this.spawnNode.bind(this);\r\n        this.pathAnimation = this.pathAnimation.bind(this);\r\n        this.animateNext = this.animateNext.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: Number(value)\r\n        })\r\n    }\r\n\r\n    handleClick(event) {\r\n        event.preventDefault();\r\n        if (this.state.number === \"\") return;\r\n        if (isNaN(this.state.number)) {\r\n            alert(\"Please insert a number instead\");\r\n            this.setState({ number: \"\" });\r\n        }\r\n        else if (this.state.tree.size === 31) {\r\n            alert(\"Maximum tree size of 31 nodes has been reached!\");\r\n            this.setState({ number: \"\" });\r\n        }\r\n        else if (this.state.number > 9999) {\r\n            alert(\"Please enter a value less than 10,000\");\r\n            this.setState({ number: \"\" });\r\n        }\r\n        else {\r\n            const value = this.state.number;\r\n            if (this.state.tree.insert(value) === -1) {\r\n                alert(\"Value already exists in the tree!\");\r\n                this.setState({ number: \"\" });\r\n            }\r\n            else if (this.state.tree.height > 4) {\r\n                alert(\"Inserting this value will result in a total depth of 6 levels. Maximum depth allowed is 5.\");\r\n                this.setState({ number: \"\" });\r\n                this.state.tree.delete(value);\r\n            }\r\n            else {\r\n                let node = this.state.tree.getNode(value);\r\n                this.setState({ currentNode: node }, () => this.pathAnimation(node));\r\n                this.setState({ isInputDisabled: true });\r\n            }\r\n        }\r\n    }\r\n\r\n    animateNext() {\r\n        let node = this.state.currentNode;\r\n        // console.log(\"Log Start\");\r\n        // console.log(this.state.animatedNodesKeys.length)\r\n        // console.log(this.state.animatedKeyCounter);\r\n        // console.log(\"Log End\");\r\n\r\n        if (this.state.animatedKeyCounter < this.state.animatedNodesKeys.length) {\r\n            let currNode = this[`nodeRef${this.state.animatedNodesKeys[this.state.animatedKeyCounter]}`].current;\r\n            this.setState(prevState => ({ animatedKeyCounter: prevState.animatedKeyCounter + 1 }));\r\n            (node.value >= currNode.state.value) ? currNode.animateGreen() : currNode.animateRed();\r\n        }\r\n        else {\r\n            // console.log(\"extra\");\r\n            // console.log(this.state.animatedNodesKeys);\r\n            this.setState({ animatedKeyCounter: 0 }, () => this.spawnNode(node));\r\n        }\r\n    }\r\n\r\n    pathAnimation() {\r\n        let node = this.state.currentNode;\r\n        let nodeBinaryString = Number(node.key).toString(2);\r\n        const keysArray = [];\r\n        for (let index = 1; index < nodeBinaryString.length; index++) {\r\n            let currentBinaryString = nodeBinaryString.slice(0, index);\r\n            let currentKey = parseInt(currentBinaryString, 2);\r\n            keysArray.push(currentKey);\r\n        }\r\n\r\n        this.setState({ animatedNodesKeys: keysArray }, function () {\r\n            this.animateNext(node);\r\n        });\r\n    }\r\n\r\n    spawnNode(node) {\r\n        const tempNodeInfo = nodesPositions[node.key - 1];\r\n        this[`nodeRef${node.key}`] = createRef();\r\n\r\n        const tempNodeCircle = <NodeCircle\r\n            id={`nodeID${node.key}`}\r\n            ref={this[`nodeRef${node.key}`]}\r\n            key={node.key}\r\n            value={node.value}\r\n            colStart={tempNodeInfo.colStart}\r\n            colEnd={tempNodeInfo.colEnd}\r\n            rowStart={tempNodeInfo.rowStart}\r\n            rowEnd={tempNodeInfo.rowEnd}\r\n            animateNode={this.animateNext}\r\n        />\r\n\r\n        let nodesArray = [...this.state.nodesArray];\r\n        nodesArray[node.key] = tempNodeCircle;\r\n\r\n        let arrowsArray = [...this.state.arrowsArray];\r\n        if (node.key !== 1) {\r\n            const tempArrowInfo = arrowPositions[node.key - 2];\r\n            const tempArrow = <Arrow\r\n                id={`arrowID${node.key}`}\r\n                ref={this[`arrowRef${node.key}`]}\r\n                key={node.key}\r\n                colStart={tempArrowInfo.colStart}\r\n                colEnd={tempArrowInfo.colEnd}\r\n                rowStart={tempArrowInfo.rowStart}\r\n                rowEnd={tempArrowInfo.rowEnd}\r\n                direction={tempArrowInfo.direction}\r\n            />\r\n            arrowsArray[node.key] = tempArrow;\r\n        }\r\n\r\n        this.setState({ nodesArray });\r\n        this.setState({ arrowsArray });\r\n        this.setState({ isInputDisabled: false });\r\n        this.setState({ number: \"\" });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ height: \"100vh\" }}>\r\n\r\n                <div className=\"header\">\r\n                    BINARY SEARCH TREE VISUALIZER\r\n                </div>\r\n\r\n                <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 6fr\", height: \"93vh\" }}>\r\n                    <div className=\"sideBar\" style={{ gridColumnStart: 1, gridColumnEnd: 2 }}>\r\n                        <form onSubmit={this.handleClick} >\r\n                            <div className=\"form__group field\" >\r\n                                <input type=\"text\" value={this.state.number} className=\"form__field\" id=\"name\" placeholder=\"Insert a Value\" name=\"number\" onChange={this.handleChange} disabled={this.state.isInputDisabled} />\r\n                                <label for=\"name\" className=\"form__label\">Insert value</label>\r\n                            </div>\r\n                        </form>\r\n                        <a className=\"bt more-bt\" onClick={this.handleClick} >\r\n                            <span className=\"fl\"></span><span className=\"sfl\"></span><span className=\"cross\"></span><i></i>\r\n                            <div>add</div>\r\n                        </a>\r\n\r\n                        <div className=\"otherInfo\" style={{ marginTop: \"auto\" }}>\r\n                            <span style={{ fontSize: \"1.2em\", color: \"white\" }}><strong>Changelog:</strong> </span>\r\n                            <ul>\r\n                                <li> Added a circular bar representing the size of the tree</li>\r\n                                <li> Added new style and animations to the insert field and button</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"otherInfo\">\r\n                            <span style={{ fontSize: \"1.2em\", color: \"white\" }}><strong>Planned Features:</strong> </span>\r\n                            <ul>\r\n                                <li> Animating the arrows with color as well </li>\r\n                                <li> Adding a slider to change animation speed </li>\r\n                                <li> An option to delete specific nodes</li>\r\n                                <li> Implementing AVL tree data structure </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{ gridColumnStart: 2, gridColumnEnd: 3, display: \"grid\", gridTemplateRows: \"20% 80%\", padding: \"1% 1% 2.5% 1%\", gridRowGap: \"2.5%\" }}>\r\n                        <div style={{ display: \"grid\", gridTemplateColumns: \"9% 90%\", height: \"100%\", gridColumnGap: \"1%\" }} >\r\n                            <div style={{ backgroundColor: \"#424242\", borderRadius: \"2vh\", alignSelf: \"center\", padding: \"5%\" }}>\r\n                                <CircularProgressbarWithChildren value={this.state.tree.size} maxValue={31} text={`${Math.round(this.state.tree.size / 31 * 100)}%`} circleRatio={0.75} styles={buildStyles({\r\n                                    rotation: 1 / 2 + 1 / 8,\r\n                                    pathColor: \"#ba68c8\",\r\n                                    textColor: \"#ba68c8\",\r\n                                })}>\r\n                                </CircularProgressbarWithChildren>\r\n                                <div style={{ color: \"white\", textAlign: \"center\", fontSize: \"1.2em\" }}> <strong>{`Size: ${this.state.tree.size} /31`} </strong></div>\r\n                            </div>\r\n                            <div style={{ backgroundColor: \"#424242\", borderRadius: \"2vh\", padding: \"1%\", color: \"white\" }}>\r\n                                <span style={{ fontSize: \"1.5em\" }}><strong>Tutorial:</strong> </span> <br />  <br />\r\n                                Simply use the interface on the left to interact with the tree by adding a value anywhere from 0 to 9,999. <br/> <br />\r\n                                Limitations: Negative values are not accepted / Repeated values are not accepted / Maximum depth of 5 levels / Maximum of 31 nodes\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"grid\">\r\n                            {this.state.nodesArray}\r\n                            {this.state.arrowsArray}\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}