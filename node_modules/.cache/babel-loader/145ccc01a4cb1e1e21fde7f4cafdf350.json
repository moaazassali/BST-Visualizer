{"ast":null,"code":"import Node from \"./NodeClass\";\nexport default class AVLTree {\n  constructor(val) {\n    this.root = new Node(val);\n  }\n\n  height(node) {\n    return node === null ? -1 : node.height;\n  }\n\n  insert(val) {\n    return this.insertRec(this.root, val);\n  }\n\n  insertRec(node, val) {\n    if (node === null) return node = new Node(val);\n    if (val < node.value) node.left = this.insertRec(node.left, val);else if (val > node.value) node.right = this.insertRec(node.right, val);else return node;\n    node.height = 1 + Math.max(this.height(node.left), this.height(node.right));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Muaath/Desktop/AVL/src/AVLTreeVisualizer/AVLTreeClass.js"],"names":["Node","AVLTree","constructor","val","root","height","node","insert","insertRec","value","left","right","Math","max"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AAEA,eAAe,MAAMC,OAAN,CAAc;AACzBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKC,IAAL,GAAY,IAAIJ,IAAJ,CAASG,GAAT,CAAZ;AACH;;AAEDE,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,WAAOA,IAAI,KAAK,IAAT,GAAgB,CAAC,CAAjB,GAAqBA,IAAI,CAACD,MAAjC;AACH;;AAEDE,EAAAA,MAAM,CAACJ,GAAD,EAAM;AACR,WAAO,KAAKK,SAAL,CAAe,KAAKJ,IAApB,EAA0BD,GAA1B,CAAP;AACH;;AAEDK,EAAAA,SAAS,CAACF,IAAD,EAAOH,GAAP,EAAY;AACjB,QAAIG,IAAI,KAAK,IAAb,EAAmB,OAAOA,IAAI,GAAG,IAAIN,IAAJ,CAASG,GAAT,CAAd;AAEnB,QAAIA,GAAG,GAAGG,IAAI,CAACG,KAAf,EAAsBH,IAAI,CAACI,IAAL,GAAY,KAAKF,SAAL,CAAeF,IAAI,CAACI,IAApB,EAA0BP,GAA1B,CAAZ,CAAtB,KACK,IAAIA,GAAG,GAAGG,IAAI,CAACG,KAAf,EAAsBH,IAAI,CAACK,KAAL,GAAa,KAAKH,SAAL,CAAeF,IAAI,CAACK,KAApB,EAA2BR,GAA3B,CAAb,CAAtB,KACA,OAAOG,IAAP;AAELA,IAAAA,IAAI,CAACD,MAAL,GAAc,IAAIO,IAAI,CAACC,GAAL,CAAS,KAAKR,MAAL,CAAYC,IAAI,CAACI,IAAjB,CAAT,EAAiC,KAAKL,MAAL,CAAYC,IAAI,CAACK,KAAjB,CAAjC,CAAlB;AACH;;AArBwB","sourcesContent":["import Node from \"./NodeClass\"\r\n\r\nexport default class AVLTree {\r\n    constructor(val) {\r\n        this.root = new Node(val);\r\n    }\r\n\r\n    height(node) {\r\n        return node === null ? -1 : node.height;\r\n    }\r\n\r\n    insert(val) {\r\n        return this.insertRec(this.root, val);\r\n    }\r\n\r\n    insertRec(node, val) {\r\n        if (node === null) return node = new Node(val);\r\n\r\n        if (val < node.value) node.left = this.insertRec(node.left, val);\r\n        else if (val > node.value) node.right = this.insertRec(node.right, val);\r\n        else return node;\r\n\r\n        node.height = 1 + Math.max(this.height(node.left), this.height(node.right));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}