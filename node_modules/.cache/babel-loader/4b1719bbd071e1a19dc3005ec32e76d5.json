{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Muaath\\\\Desktop\\\\AVL\\\\src\\\\AVLTreeVisualizer\\\\AVLTreeVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport \"./componentStyles.css\";\nimport NodeCircle from \"./NodeCircle.jsx\";\nimport nodesPositions from \"./NodesPositions.js\";\nimport AVLTree from \"./AVLTreeClass.js\";\nexport default class AVLTreeVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      number: \"\",\n      tree: new AVLTree(),\n      nodesArray: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleClick() {\n    if (isNaN(this.state.number)) alert(\"Please insert a number instead\");\n    if (this.state.number > 9999) alert(\"Please enter a value less than 10,000\");else {\n      let value = this.state.number;\n      this.state.tree.insert(value);\n      let node = this.state.tree.getNode(value);\n      console.log(node);\n      this.spawnNode(node);\n    }\n  }\n\n  spawnNode(node) {\n    const tempNodeInfo = nodesPositions[node.key - 1];\n\n    const tempNodeCircle = /*#__PURE__*/_jsxDEV(NodeCircle, {\n      value: node.value,\n      colStart: tempNodeInfo.colStart,\n      colEnd: tempNodeInfo.colEnd,\n      rowStart: tempNodeInfo.rowStart,\n      rowEnd: tempNodeInfo.rowEnd\n    }, node.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 32\n    }, this);\n\n    let nodesArray = [...this.state.nodesArray];\n    nodesArray[node.key] = tempNodeCircle;\n    this.setState({\n      nodesArray\n    });\n  }\n\n  render() {\n    // const nodes = nodesPositions.map(item => <NodeCircle colStart={item.colStart} colEnd={item.colEnd} rowStart={item.rowStart} rowEnd={item.rowEnd} />);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.number,\n            name: \"number\",\n            placeholder: \"Insert a Value\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleClick,\n          children: \"Insert!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: [console.log(this.state.tree), this.state.nodesArray]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Muaath/Desktop/AVL/src/AVLTreeVisualizer/AVLTreeVisualizer.jsx"],"names":["React","Component","NodeCircle","nodesPositions","AVLTree","AVLTreeVisualizer","constructor","state","number","tree","nodesArray","handleChange","bind","handleClick","event","name","value","target","setState","isNaN","alert","insert","node","getNode","console","log","spawnNode","tempNodeInfo","key","tempNodeCircle","colStart","colEnd","rowStart","rowEnd","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./componentStyles.css\";\r\nimport NodeCircle from \"./NodeCircle.jsx\";\r\nimport nodesPositions from \"./NodesPositions.js\";\r\nimport AVLTree from \"./AVLTreeClass.js\";\r\n\r\nexport default class AVLTreeVisualizer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            number: \"\",\r\n            tree: new AVLTree(),\r\n            nodesArray: []\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    handleClick() {\r\n        if (isNaN(this.state.number)) alert(\"Please insert a number instead\");\r\n        if (this.state.number > 9999) alert(\"Please enter a value less than 10,000\");\r\n        else {\r\n            let value = this.state.number;\r\n            this.state.tree.insert(value);\r\n            let node = this.state.tree.getNode(value);\r\n            console.log(node);\r\n            this.spawnNode(node);\r\n        }\r\n    }\r\n\r\n    spawnNode(node) {\r\n        const tempNodeInfo = nodesPositions[node.key-1];\r\n        const tempNodeCircle = <NodeCircle key={node.key} value={node.value} colStart={tempNodeInfo.colStart} colEnd={tempNodeInfo.colEnd} rowStart={tempNodeInfo.rowStart} rowEnd={tempNodeInfo.rowEnd} />\r\n        \r\n        let nodesArray = [...this.state.nodesArray];\r\n        nodesArray[node.key] = tempNodeCircle;\r\n\r\n        this.setState({ nodesArray });\r\n    }\r\n\r\n    render() {\r\n        // const nodes = nodesPositions.map(item => <NodeCircle colStart={item.colStart} colEnd={item.colEnd} rowStart={item.rowStart} rowEnd={item.rowEnd} />);\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <form>\r\n                        <input type=\"text\" value={this.state.number} name=\"number\" placeholder=\"Insert a Value\" onChange={this.handleChange} />\r\n                    </form>\r\n                    <button onClick={this.handleClick}>Insert!</button>\r\n                </div>\r\n\r\n                <div className=\"grid\">\r\n                    {console.log(this.state.tree)}\r\n                    {this.state.nodesArray}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}