{"ast":null,"code":"import Node from \"./NodeClass\";\nexport default class AVLTree {\n  constructor() {\n    this.root = null;\n  }\n\n  height(node) {\n    return node === null ? -1 : node.height;\n  }\n\n  insert(val) {\n    this.root = this.insertRec(this.root, val);\n  }\n\n  insertRec(node, val) {\n    if (node === null) return node = new Node(val);\n    if (val < node.value) node.left = this.insertRec(node.left, val);else if (val > node.value) node.right = this.insertRec(node.right, val);\n    return node;\n  }\n\n  levelOrder() {\n    if (!this.root) {\n      return;\n    }\n\n    let queues = [[], []];\n    let current_queue = queues[0];\n    let next_queue = queues[1];\n    current_queue.push(this.root);\n    let level_number = 0;\n\n    while (current_queue.length > 0) {\n      let temp = current_queue.shift();\n      console.log(temp.value + \" \");\n\n      if (temp.left) {\n        next_queue.push(temp.left);\n      }\n\n      if (temp.right) {\n        next_queue.push(temp.right);\n      }\n\n      if (current_queue.length === 0) {\n        level_number++;\n        current_queue = queues[level_number % 2];\n        next_queue = queues[(level_number + 1) % 2];\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Muaath/Desktop/AVL/src/AVLTreeVisualizer/AVLTreeClass.js"],"names":["Node","AVLTree","constructor","root","height","node","insert","val","insertRec","value","left","right","levelOrder","queues","current_queue","next_queue","push","level_number","length","temp","shift","console","log"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AAEA,eAAe,MAAMC,OAAN,CAAc;AACzBC,EAAAA,WAAW,GAAG;AACV,SAAKC,IAAL,GAAY,IAAZ;AACH;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,WAAOA,IAAI,KAAK,IAAT,GAAgB,CAAC,CAAjB,GAAqBA,IAAI,CAACD,MAAjC;AACH;;AAEDE,EAAAA,MAAM,CAACC,GAAD,EAAM;AACR,SAAKJ,IAAL,GAAY,KAAKK,SAAL,CAAe,KAAKL,IAApB,EAA0BI,GAA1B,CAAZ;AACH;;AAEDC,EAAAA,SAAS,CAACH,IAAD,EAAOE,GAAP,EAAY;AACjB,QAAIF,IAAI,KAAK,IAAb,EAAmB,OAAQA,IAAI,GAAG,IAAIL,IAAJ,CAASO,GAAT,CAAf;AAEnB,QAAIA,GAAG,GAAGF,IAAI,CAACI,KAAf,EAAsBJ,IAAI,CAACK,IAAL,GAAY,KAAKF,SAAL,CAAeH,IAAI,CAACK,IAApB,EAA0BH,GAA1B,CAAZ,CAAtB,KACK,IAAIA,GAAG,GAAGF,IAAI,CAACI,KAAf,EAAsBJ,IAAI,CAACM,KAAL,GAAa,KAAKH,SAAL,CAAeH,IAAI,CAACM,KAApB,EAA2BJ,GAA3B,CAAb;AAE3B,WAAOF,IAAP;AACH;;AAEDO,EAAAA,UAAU,GAAG;AACT,QAAI,CAAC,KAAKT,IAAV,EAAgB;AACZ;AACH;;AAED,QAAIU,MAAM,GAAG,CACT,EADS,EAET,EAFS,CAAb;AAIA,QAAIC,aAAa,GAAGD,MAAM,CAAC,CAAD,CAA1B;AACA,QAAIE,UAAU,GAAGF,MAAM,CAAC,CAAD,CAAvB;AAEAC,IAAAA,aAAa,CAACE,IAAd,CAAmB,KAAKb,IAAxB;AACA,QAAIc,YAAY,GAAG,CAAnB;;AAEA,WAAOH,aAAa,CAACI,MAAd,GAAuB,CAA9B,EAAiC;AAC7B,UAAIC,IAAI,GAAGL,aAAa,CAACM,KAAd,EAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACV,KAAL,GAAa,GAAzB;;AACA,UAAIU,IAAI,CAACT,IAAT,EAAe;AACXK,QAAAA,UAAU,CAACC,IAAX,CAAgBG,IAAI,CAACT,IAArB;AACH;;AAED,UAAIS,IAAI,CAACR,KAAT,EAAgB;AACZI,QAAAA,UAAU,CAACC,IAAX,CAAgBG,IAAI,CAACR,KAArB;AACH;;AAED,UAAIG,aAAa,CAACI,MAAd,KAAyB,CAA7B,EAAgC;AAC5BD,QAAAA,YAAY;AACZH,QAAAA,aAAa,GAAGD,MAAM,CAACI,YAAY,GAAG,CAAhB,CAAtB;AACAF,QAAAA,UAAU,GAAGF,MAAM,CAAC,CAACI,YAAY,GAAG,CAAhB,IAAqB,CAAtB,CAAnB;AACH;AACJ;AACJ;;AAtDwB","sourcesContent":["import Node from \"./NodeClass\"\r\n\r\nexport default class AVLTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node) {\r\n        return node === null ? -1 : node.height;\r\n    }\r\n\r\n    insert(val) {\r\n        this.root = this.insertRec(this.root, val);\r\n    }\r\n\r\n    insertRec(node, val) {\r\n        if (node === null) return (node = new Node(val));\r\n\r\n        if (val < node.value) node.left = this.insertRec(node.left, val);\r\n        else if (val > node.value) node.right = this.insertRec(node.right, val);\r\n\r\n        return node;\r\n    }\r\n\r\n    levelOrder() {\r\n        if (!this.root) {\r\n            return;\r\n        }\r\n\r\n        let queues = [\r\n            [],\r\n            []\r\n        ];\r\n        let current_queue = queues[0];\r\n        let next_queue = queues[1];\r\n\r\n        current_queue.push(this.root);\r\n        let level_number = 0;\r\n\r\n        while (current_queue.length > 0) {\r\n            let temp = current_queue.shift();\r\n            console.log(temp.value + \" \");\r\n            if (temp.left) {\r\n                next_queue.push(temp.left);\r\n            }\r\n\r\n            if (temp.right) {\r\n                next_queue.push(temp.right);\r\n            }\r\n\r\n            if (current_queue.length === 0) {\r\n                level_number++;\r\n                current_queue = queues[level_number % 2];\r\n                next_queue = queues[(level_number + 1) % 2];\r\n            }\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}